
Yeni bir proje için 
ng new northwind-store --skip-tests=true --standalone=false //northwind-store adında bir proje oluşturduk.

ng serve ile proje ayağa kalktı.

Gerekli paketler
Angular Language Services
Bootstrap 5 quick snippets
Github pull request
prettier - code formatter
vscode-icons

Angular .json angularla ilgili konfigrasyonlar
src kaynak kodlarımızın olduğu klasör.
package.json npm paketlerini yönettiğimiz dosya

internete kapalı ağda node modules klasörünü kopyalayıp projemize aynı adda almalıyız.

tsconfig dosyası typscritp konfigürasyonları yapacağız.


style css - uygulama geneli stiller buraya yazılır.
main.ts - uygulama burayla başlar.
index.html - SPA(Single page application) fiziksel anlamda tek sayfa bu html sayfası. Routing yardımıyla yazdığımız componentlere gideriz. (Bir component ts,html,css ve spec.ts dosyalarından oluşur. )

assets - uygulamada kullanılacak resim müzik video veya farklı javascript dosyalarının tutulduğu yer

uygulamayı oluşturan tüm varlıklar app klasörünün altında çalışır.

----https://getbootstrap.com/ //Evde bunu incele



Bu projede bootstrap kullanacağız. Bunun için yukarıdaki linkten yararlandık.

--UI için https://themeforest.net/ sitesinden template satın alınabilir.


Proje dizininde nmp install komut satırında çalıştırılırsa package.json daki paketleri yükler.
Paket ismi yazarsak yanına ilgili paketi alır ve package.json a koyar. fiziksel olarak node_modules altında tutulur.
npm install bootstrap@5.3.3


package.json içinde dependencies Uygulamanaın sağlıklı çalışabilmesi içn ihtiyaç duyulan paketleri belirtir. devDependencies ise development safhasında gerekli paketleri belirtir.


Projmize bootstrap ve css dosyası eklemek istersek angular.json dosyasında  "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ], 
            bölümüne yazmalıyız. Çünkü index.html e eklenen  her link yeni bir istek olarak sunucuya gider. 
            Aynı şekilde javascript te aynı dosyada bu bölüme eklenir;  
              "scripts": [
              "node_modules/bootstrap/dist/css/bootstrap.bundle.min"
            ]

----Popper js popup eklemek için kullanılır.



-----Kısa yol 

div.row>div.col*2 

<div class="row">
  <div class="col"></div>
  <div class="col"></div>
</div>  
bunu oluşturur. ">" işareti child ı ifade eder.
-----------------------------------------------------------
Componentler oluşturduk.
ng g c components/menu --inline-style=true
ng g c components/Category-list --inline-style=true
ng g c components/Product-list --inline-style=true
DOSKEY /history > cmd_history20240514.txt
-------------------------------------------------------------

20240514_AngularLessonTwo
Ng serve p komutu port değişir.
Varsayılan olarak değiştirmek için angular json 
Angular CLI app in altında çalışır.
Çok basit uygulamalar hariç external çalışırız.
Menu cmponenti standalone = false oluştrduğumuz için app modulün altına import edildi.
Data Binding
Template ile class arasında veri alışverişi sağlar.
Angular Data Binding Yöntemleri
Interpolation
Template <=Class tek yönlü interpolation kullanırız. {} ile kullanırız
Property Binding
Template <=Class tek yönlü class atribute in alınmasını sağlar.[ ] ile kullanırız.
Event Binding
Template =>Class tek yönlü () ile kullanırız.
TwoWay Binding
Template <=>Class ili yönlü [{}] Banana in Box
Angular Data Binding Stratejileri (Change Detection Strategy)
Default-Auto
OnPush-Trigger ile(buton, textbox vs)
DOM (Document Object Model)kullancının etkileşimde olduğu model


-----------------------------------------------------------
Lifecycle Hooks:
ngOnInit: İlgili komponent yüklendiğinde bir defa tetiklenir
ngOnChanges: İlgili komponentte bir parametrede(input parametresi) değişiklik olduğunda tetiklenir.
ngDoCheck: Herhangi bir komponentte değişiklik olduğunda tetiklenir.
ngOnDestroy: İlgili komponent .....

ngOnInit ve Asenkron İstek: ngOnInit içinde, asıl veri yükleme işlemini yapan loadCategories isimli bir metod çağırılır. Bu metod, HTTP GET isteğini gönderir ve bir Observable döndürür. subscribe metodunu kullanarak, bu Observable'a abone olunur. Veri başarıyla geldiğinde, categories dizisine atanır; bir hata oluştuğunda ise hata konsola yazdırılır.

private loadCategories(): void {

this.http.get<Category[]>("http://localhost:5222/api/Categories").subscribe(

      (data) => {

        this.categories = data; // Gelen veriyi component'in state'ine ata

      },

      (error) => {

        console.error('Error fetching categories', error); // Hata yönetimi

      }



Angularda observable mimarisi çalışıyor. bunu rxjs kütüphanesi sağlıyor. Ayrıntılı bilgi https://rxjs.dev/

---------------------------------------------------------------------
Pipe: template de bir veriyi formatlamak için kullanılır (Html de). Parametre alabilirler. Bir class tır. Bunu pipe yapan şey bir dekoratördür. Aynı veri için birden fazla pipe aynı anda kullanılabilir.

Dokümantasyon built in pipes ta hazır olan formatlar.

Kendimiz custom bir pipe yazmak istersek (currency,uppercase,lowercase gibi) konsolda;
    ng generate pipe [name]

    Bir transfer metodu oluşturur. Bu metodun içine ne yazarsak custom pipe onu döndürür.

----------------------------------------------------------------

Servisler: Componentler arasında kullanılacak ortak iş kurallarının ve veri paylaşımının oluşturulduğu class lardır. iş kuralı katmanında oluşturulur.
Bu class lar new lenmeden dependency injection ile çağırılır.

@Injectable ile yapılır. 

Dependency injection ile üretilen instance ın lifescyle ı için;
Bir servisi ilgili component e provide edilirse o component için bir instance oluşturur.  (Transcient gibi çalışır.)
Modüle provide edilirse ; modül bileşenlerinin tümü için tek instance üretir. (Scope gibi)
Root modüle yani main de çağırılan ve programın başladığı modüle provide edilirse; .............................(Singleton gibi çalışır)

servis oluşturmak için  

ng g s services/category komutunu çalıştırdık.(Terminal)

-----------------------------------------------------------------------------------------------------------------------------

Direktif: Html i extend etmeyi sağlayan nesnelerdir. (*ngFor,*ngIf..). Htmle yeni yetenekler kazandırır. 
-Componentler de birer direktiftir.
-Attribute direktifler (ngstyle...)
-Yapısal direktifler (*ngFor...)

--------------------------------------------------------------
https://typescript-play.js.org/
--------------------------------------------------------------
**Aynı sayfada birden fazla router_outlet kullanabiliriz. Ancak böyle bir durumda isim verilmesi gerekmektedir.
**Sabit bir şablon oluşturuyoruz ve bütün sayfalarda değişmeden kalıyor. Buna masterpage veya layout denir.
**Her child component, parent component içindeki router_outlet de açılır.

--------------------------------------------------------------
Uygulama içinde veri filtrelemesi

**Angularda sayfanın yeniden yüklenmesi istenen bir durum değildir. Bunun yerine mevcut route u aktifleştirerek istenen sayfaya yönlendirme yapılır. 
**Veri taşıması 3 şekilde yapılır. --Header ---Body ---Url vasıtasıyla
**Bizim tercih ettiğimiz şekli root(Url) vasıtasıyla veriyi taşımaktır. Arama motorları query stringleri listelemez.

------------------------------------------------------------------------------------

Login ekranı için ;
ng g m --routing=true // dersek route tanımı da yapar, bir de route modülü oluşturur. Burada bir modül oluşturuyoruz.
ng g m modules/admin --routing=true //Bunu çalıştırdık.

Admin sayfalarının kendisine özgü tasarımı olacaksa; admin layoutlar oluşturulmalı. Bunun için component oluşturduk.
ng g c modules/admin/admin-layout 

---------------------------
Shared modül oluşturuyoruz, çünkü bu modülü birden fazla yerde kullanacağız.
ng g m modules/shared //--routing demedik çünkü routing yapmayacağız.
-----------------------------------------
Lazyloading
İlgili modülün direkt olarak appmodule ile değil ,routelarla almak, böylelikle appmodulu başlatan main.ts (derlenmiş hali mai.js) 
boyutunun küçük kalmasını ve ilgili modüle ihtiyaç duyulduğunda yüklenmesini sağlar.
Bizim şuana kadarki yapımız eager loading ti yani appmodule ile sağlanıyordu. Bundan sonraki safhada lazyload a çevireceğiz.
---------------------------------------------------------------
